#!/usr/bin/env bash

# * =============================================================
# * @Author:  Wayne Wang <net_use@bzhy.com>
# *
# * @Copyright (c) 2024 Bzhy Network. All rights reserved.
# * @HomePage http://www.sysadm.cn
# *
# * Licensed under the Apache License, Version 2.0 (the "License");
# * you may not use this file except in compliance with the License.
# * You may obtain a copy of the License at:
# * http://www.apache.org/licenses/LICENSE-2.0
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and  limitations under the License.
#* @License GNU Lesser General Public License  https://www.sysadm.cn/lgpl.html

set -o errexit
set -o nounset
set -o pipefail

GENERATED_FILE="zz_generated.runtime.go"
GOHEADERFILE_FILE="CopyRight"
APIDIRS="command newcommand"
MODULENAME="sysadm"
CONVERSIONTAG="// +sysadm:conversion-gen"

function generate::runtime::files(){
    SYSADM_ROOT=$1
    cd ${SYSADM_ROOT}

    APIROOTS=${APIROOTS:-$(git grep --files-with-matches -e "${CONVERSIONTAG}" ${APIDIRS} | \
    xargs -n 1 dirname | sort | uniq)}

    importPackages=""
    for item in ${APIROOTS}
    do
       rootPathName=$(echo ${item} |cut -d "/" -f1)
       package=$(echo ${item} |tr '/' '\n'  |tail -n1)
       aliasName="${rootPathName}${package}"
       if [ "X${importPackages}" == "X" ]; then
          importPackages="${aliasName}|${MODULENAME}/${item}|${rootPathName}"
       else
          importPackages="${importPackages} ${aliasName}|${MODULENAME}/${item}|${rootPathName}"
        fi
    done

    if [ "X${importPackages}" == "X" ]; then
       return
    fi

    GENERATECODEGENERATORFILE="${SYSADM_ROOT}/apimachinery/codegenerator/runtimegenerator/${GENERATED_FILE}"
    [[ -f "${GENERATECODEGENERATORFILE}" ]] && rm -rf "${GENERATECODEGENERATORFILE}"
    cat "${SYSADM_ROOT}/${GOHEADERFILE_FILE}" >"${GENERATECODEGENERATORFILE}"
    echo -e "" >>"${GENERATECODEGENERATORFILE}"
    echo -e "" >>"${GENERATECODEGENERATORFILE}"
    echo "package main" >>"${GENERATECODEGENERATORFILE}"
    echo "" >>"${GENERATECODEGENERATORFILE}"
    echo "import (" >>"${GENERATECODEGENERATORFILE}"
    echo -e "\truntimeBetaV1 \"${MODULENAME}/apimachinery/runtime/v1beta1\"" >>"${GENERATECODEGENERATORFILE}"

    registryType=""
    for item in ${importPackages}
    do
        aliasName=$(echo ${item} |cut -d "|" -f1)
        modulePath=$(echo ${item} |cut -d "|" -f2)
        echo -e "\t${aliasName} \"${modulePath}\"" >>"${GENERATECODEGENERATORFILE}"
        registryType="${registryType}\t{ Gv: ${aliasName}.SchemaGroupVersion, Alias: \"${aliasName}\", ${ AddNewTypeFn: ${aliasName}.TypeRegistryFunc,ImportPath: \"${modulePath}\" },\n"
    done

    echo ")" >>"${GENERATECODEGENERATORFILE}"
    echo "" >>"${GENERATECODEGENERATORFILE}"

    echo "var registeredResources = []runtimeBetaV1.RegistryType{" >>"${GENERATECODEGENERATORFILE}"
    echo -e "${registryType}" >>"${GENERATECODEGENERATORFILE}"
    echo "}" >>"${GENERATECODEGENERATORFILE}"

    go install ${MODULENAME}/apimachinery/codegenerator/runtimegenerator
    runtimegeneratorBin=$(which runtimegenerator)
    if [[ -z ${runtimegeneratorBin} ]]; then
        echo "binary runtimegenerator was not found"
        exit
    fi

    ${runtimegeneratorBin} -module-name ${MODULENAME} -sysadm-root ${SYSADM_ROOT}
    if [ $? != 0 ]; then
        echo "generate runtime files error "
        exit
    fi

}

